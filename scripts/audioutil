#!/bin/sh
# shell script that controls audio and media-related things
# see usage for current features

# {{{ functions
# {{{ show usage
usage() {
    cat << EOF

No valid command specified.

 USAGE:
    audioutil [MAIN OPTION] [OPTIONS]

 MAIN OPTIONS:
     vol              Volume/audio-related control
     media            Media control
     help | usage     Shows this message

 OPTIONS (vol):
     inc              Increases volume
     dec              Decreases volume
     get              Gets the volume

     mute             Toggles the mute state
     get_mute         Gets the mute state

     inc_sink         Cycles the default sink upwards
     dec_sink         Cycles the default sink downwards
     get_sink         Gets the numerical index, name, and description of the default sink

 OPTIONS (media):
     next             Skips to the next song
     toggle           Plays or pauses
     prev             Skips to the previous song

Volume options require the pactl program.
Media options require the playerctl program.

EOF
    exit 1
}
# }}}

# {{{ get information
# {{{ lists
# sinks list
sinks    () { pactl list sinks | grep -F -A3 'Sink';                      }

# sinks list, indexes only
sinks_idx() { pactl list sinks | awk '/Sink #/ { print $2 }' | tr -d '#'; }
# }}}

# {{{ information about the default sink
# sink details
sink_dtls() { sinks | grep -B2 -A1 "$(pactl get-default-sink)$";          }

# sink index
sink_idx () { sink_dtls | head -n 1 | awk '{ print $2 }' | tr -d '#';     }

# sink description
sink_desc() { sink_dtls | grep -F 'Description:' | cut -d ' ' -f 2-;      }

# sink name
sink_name() { pactl get-default-sink;                                     }
# }}}

# {{{ other
# glava index
glava_idx() { pactl list source-outputs | awk '/Source Output #|application.name = "glava"/ { print $3 }' | grep -F -B1 'glava' | head -n 1 | tr -d '#'; }
# }}}
# }}}

# {{{ change volume
vol() {
    case $1 in
        mute)
            # toggle mute
            pactl set-sink-mute @DEFAULT_SINK@ toggle

            # notify new mute status
            mute="$("$0" vol get_mute)"; if [ "$mute" == "yes" ]; then prefix=" "; vol="Muted"; else prefix=" "; vol="$("$0" vol get)"; fi
            notify "${prefix}Volume: ${vol}"
            ;;

        *)
            # don't adjust volume if muted
            mute="$("$0" vol get_mute)"
            [ "$mute" == "no" ] && pactl set-sink-volume @DEFAULT_SINK@ "$1" || return 0

            # notify new volume
            vol="$("$0" vol get)"
            notify " Volume: ${vol}"
            ;;
    esac
}
# }}}

# {{{ change the default sink
# {{{ helper functions
fnr_to_idx() { echo "$1" | awk "FNR == $2"         ; }
idx_to_fnr() { echo "$1" | awk "/$2/ { print FNR }"; }
# }}}

# {{{ main function
change_sink() {
    # get info
    sinks="$(sinks_idx)"
    sink="$(sink_idx)"

    # increase or decrease
    case $1 in
        +) new_fnr="$(expr "$(idx_to_fnr "$sinks" "$sink")" + 1)" ;;
        -) new_fnr="$(expr "$(idx_to_fnr "$sinks" "$sink")" - 1)" ;;
        *) return 1                                               ;;
    esac

    # check if the new sink is out of bounds
    min=1; max="$(echo "$sinks" | wc -l)"

    if   [ "$new_fnr" -lt "$min" ]; then
        new_sink="$(echo "$sinks" | tail -n 1)"
    elif [ "$new_fnr" -gt "$max" ]; then
        new_sink="$(echo "$sinks" | head -n 1)"
    else
        new_sink="$(fnr_to_idx "$sinks" "$new_fnr")"
    fi

    # set the sink
    pactl set-default-sink "$new_sink"

    # get new sink's info
    new_sink_name="$(sink_name)"
    new_sink_desc="$(sink_desc)"

    echo $new_sink_name
    echo $new_sink_desc

    # move glava if it's running
    echo "begin glava"
    pgrep -x glava > /dev/null && pactl move-source-output "$(glava_idx)" "${new_sink_name}.monitor"
    echo "end glava"

    # notify user
    notify " ${new_sink_desc} (#$new_sink)" "has been selected as the default sink"
}
# }}}
# }}}

# {{{ notify user
notify() {
    [ $3 ] && icon="$3" || icon=""
    [ $4 ] && time="$4" || time="2000"

    notify-send -h "string:x-canonical-private-synchronous:anything" -a "audioutil" -i "$icon" -t "$time" "$1" "$2"
}
# }}}
# }}}

# {{{ driver code
# if there aren't enough args, display usage
[ $# -lt 2 ] && usage

case $1 in
    # {{{ volume control
    vol)
        case $2 in
            inc) vol '+4%'                                                             ;;
            dec) vol '-4%'                                                             ;;
            get) pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{ print $5 }' ;;

            mute) vol mute                                                             ;;
            get_mute) pactl get-sink-mute @DEFAULT_SINK@ | awk '{ print $2 }'          ;;

            inc_sink) change_sink '+'                                                  ;;
            dec_sink) change_sink '-'                                                  ;;
            get_sink) sink_idx; sink_name; sink_desc                                   ;;

            *) usage                                                                   ;;
        esac
        ;;
    # }}}

    # {{{ media control
    media)
        case $2 in
            prev)   playerctl previous -p spotify,chromium   ;;
            toggle) playerctl play-pause -p spotify,chromium ;;
            next)   playerctl next -p spotify,chromium       ;;

            *) usage                                         ;;
        esac
        ;;
    # }}}

    # if the args are invalid or if the user asked for help, display usage
    help)  usage ;;
    usage) usage ;;
    *)     usage ;;
esac

# }}}
